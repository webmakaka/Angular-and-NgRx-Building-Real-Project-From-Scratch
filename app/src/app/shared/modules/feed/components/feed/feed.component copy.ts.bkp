import { Component, Input, OnDestroy, OnInit } from '@angular/core';
import { ActivatedRoute, Params, Router } from '@angular/router';
import { select, Store } from '@ngrx/store';
import { Observable, Subscription } from 'rxjs';
import { constants } from 'src/app/constants';
import { getFeedAction } from 'src/app/shared/modules/feed/store/actions/getFeed.action';
import {
  errorSelector,
  feedSelector,
  isLoadingSelector,
} from 'src/app/shared/modules/feed/store/selectors';
import { IGetFeedResponse } from 'src/app/shared/modules/feed/types/getFeedResponse.interface';

@Component({
  selector: 'mc-feed',
  templateUrl: './feed.component.html',
  styleUrls: ['./feed.component.scss'],
})
export class FeedComponent implements OnInit, OnDestroy {
  @Input('apiUrl') apiUrlProps: string = '';

  limit: number = constants.limit;
  baseUrl: string = this.router.url.split('?')[0];

  isLoading$: Observable<boolean> = this.store.pipe(select(isLoadingSelector));
  error$: Observable<string | null> = this.store.pipe(select(errorSelector));
  feed$: Observable<IGetFeedResponse | null> = this.store.pipe(
    select(feedSelector)
  );
  currentPage: number = 1;
  queryParamsSubscription: Subscription = this.route.queryParams.subscribe(
    (params: Params) => {
      this.currentPage = Number(params['page'] || '1');
    }
  );

  constructor(
    private store: Store,
    private router: Router,
    private route: ActivatedRoute
  ) {}

  ngOnInit(): void {
    this.fetchData();
  }

  fetchData(): void {
    this.store.dispatch(getFeedAction({ url: this.apiUrlProps }));
  }

  ngOnDestroy(): void {
    this.queryParamsSubscription.unsubscribe();
  }
}
